(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Row' object has no attribute '_db'"
p3
sS'layer'
p4
S'/home/john/cmps183/web2py/applications/SleepLog/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\n\ndef index():\n    #q = db.entry.private == False\n    q = db(db.entry.private==False).select(orderby=~db.entry.date_posted).last()\n    title = db().select(db.entry.title)\n    entries = db().select(orderby=~db.entry.date_posted).first()\n    url = URL(\'download\')\n\n    def generate_view_button(row):\n        b = \'\' \n        # Cloud button for \'Normal\' category\n        if row.category == "Normal":\n            b = A(IMG(_src=URL(\'static/images\',\'cloud.png\'), _name = "cloudbutton",\n                         _alt="cloudbutton",_width = "30", _height = "30", \n                         _id = "cloudpic", _border = "0",\n                         _onMouseOver = "this.src=\'/SleepLog/static/images/cloud3.png\'",\n                         _onMouseOut = "this.src=\'/SleepLog/static/images/cloud.png\'" ),\n                         _class = \'btn\', _href=URL(\'default\',\'view\',args=[row.id]))\n        # Ghost button for \'Normal\' category\n        elif row.category == "Nightmare":\n            b = A(IMG(_src=URL(\'static/images\',\'ghost.png\'), _name = "ghostbutton", \n                        _alt="ghostbutton",_width = "30", _height = "30",\n                        _id = "ghostpic", _border = "0",\n                        _onMouseOver = "this.src=\'/SleepLog/static/images/ghost2.png\'",\n                        _onMouseOut = "this.src=\'/SleepLog/static/images/ghost.png\'" ),\n                        _class = \'btn\', _href=URL(\'default\',\'view\',args=[row.id]))\n        # Star button for \'Normal\' category\n        # TODO May want to have star glow when hovering over with mouse\n        elif row.category == "Lucid":\n            b = A(IMG(_src=URL(\'static/images\', \'star.png\'), _name="starbutton",\n                        _alt = "starbutton", _width="30", _height="30", \n                        _id = "starpic", _border="0", \n                        _onMouseOver = "this.src=\'/SleepLog/static/images/star2.png\'",\n                        _onMouseOut = "this.src=\'/SleepLog/static/images/star.png\'"),\n                        _class = \'btn\', _href=URL(\'default\',\'view\',args=[row.id]))\n        return b\n\n\n    def generate_edit_button(row):\n        #If the record is ours, we can edit it.\n        b = \'\'\n        if auth.user_id == row.user_id:\n            b = A(\'Edit\', _class = \'btn\', _href=URL(\'default\',\'edit\',args=[row.id]))\n        return b\n\n    def generate_delete_item_button(row):\n        # If the record is ours, we can confirm to delete it.\n        b = \'\'\n        if auth.user_id == row.user_id:\n            b = A(\'Delete\', _class=\'btn\', _href=URL(\'default\', \'delete_item\', args=[row.id]))\n        return b\n\n    # creates extra buttons\n    links = []\n    links.append(dict(header= \'\', body = generate_view_button))\n    links.append(dict(header= \'\', body = generate_edit_button))\n    links.append(dict(header= \'\', body = generate_delete_item_button))\n\n    # Generate grid from database\n    grid = SQLFORM.grid(q,\n        fields=[db.entry.user_id, \n                db.entry.category, db.entry.title,\n                db.entry.body, db.entry.date_posted],\n                csv = False,\n                editable = False,\n                deletable = False,\n                details = False,\n                links = links,\n                paginate = 10,\n                upload = url,\n                )  \n\n    return dict(title=title, grid=grid)\n\ndef about():\n    return dict()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\ndef manage():\n    grid = SQLFORM.smartgrid(db.entry, linked_tables=[\'entry\'])\n    return dict(grid=grid)\n\n\n\n@auth.requires_login()\ndef edit():\n    """edit post"""\n    p = db.entry(request.args(0)) or redirect(URL(\'default\', \'index\'))\n    if p.user_id != auth.user_id:\n        session.flash = T(\'Not Authorized\')\n        redirect(URL(\'default\',\'index\'))\n\n   # USER AUTHENTICATION NOT YET IMPLEMENTED\n    form = SQLFORM(db.entry, record=p)\n    if form.process().accepted:\n        session.flash = T(\'Updated\')\n        redirect(URL(\'default\', \'index\'))\n        # redirect(URL(\'default\', \'view\', args=[p.id]))\n    return dict(form=form)\n\n\n@auth.requires_login()\ndef delete_item():\n     item = db.entry(request.args(0)) or redirect(URL(\'default\', \'index\'))\n     form = FORM.confirm(\'Confirm Delete\',{\'Back\':URL(\'default\', \'index\')})\n     if form.accepted:\n         db(db.entry.id == item.id).delete()\n         redirect(URL(\'default\', \'index\'))\n     return dict(form=form)\n\n        \ndef view():\n    """view a post"""\n    # p = db(db.bboard.id == request.args(0)).select().first()\n    p = db.entry(request.args(0)) or redirect(URL(\'default\',\'index\'))\n    url = URL(\'download\')\n    dreamCategory = p.category\n    form = SQLFORM(db.entry, record = p, readonly = True, upload=url)\n    # p.name would contain the name of the poster.\n    return dict(form=form, dreamCategory=dreamCategory)\n\n\n\n    #\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/john/cmps183/web2py/gluon/restricted.py", line 224, in restricted\n    exec ccode in environment\n  File "/home/john/cmps183/web2py/applications/SleepLog/controllers/default.py", line 185, in <module>\n  File "/home/john/cmps183/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/john/cmps183/web2py/applications/SleepLog/controllers/default.py", line 80, in index\n    upload = url,\n  File "/home/john/cmps183/web2py/gluon/sqlhtml.py", line 1997, in grid\n    db = query._db\n  File "/home/john/cmps183/web2py/gluon/dal/objects.py", line 81, in __getitem__\n    raise ae\nAttributeError: \'Row\' object has no attribute \'_db\'\n'
p11
s.